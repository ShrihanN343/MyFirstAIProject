# meant for pre-processing data, giving model technical data such as trends, moving data, etc (used by industry professionals)


import pandas as pd 
import numpy as np 

def create_features(df):
    # create time series features from a data frame of price data
    df = df.copy() # why do we need to make a copy? --> We are taking copy of df so we avoid modifying original df in the file
    for i in range (1,31):
        df[f'lag_{i}'] = df['Close'].shift(i) # what is meant by lag? --> creating lag features to capture auto-correlation in time series data, maps how current price changes affect changes in future for 1 month
        # helps reduce 'noise' in stock market, creates a feature that is robust to noisy data, looks at price changes from month to month
        """
        Represents closing prices of previous i days, and are crucial for models to learn from past price movement. 
        A 30 day window is chosen to capture approx. one month of trade history
        Using this method, it's reasonable to assume our model would have the highest precision for a 1 month forecast
        """
    # allows model to understand changes-of-price trends across months 
    # Rolling window features smooth out short term fluctuations and help identify
    # longer term trends and momentum
    for window in [5,10,20]: 
        # Simple moving average (SMA) provides unweighted mean of the previous 'window' days
        df[f'sma_{window}'] = df['Close'].rolling(window=window).mean() 
       
        # Exponential moving average (EMA) gives more weight to recent prices, making it more responsive to new information
        df[f'ema_{window}'] = df['Close'].ewm(span = window, adjust = False).mean() # ewm - Pandas df, stands for exponetially weighted moving avg
        # simple moving avg = sma, ema = exp moving avg, sma analyzes broader trends, ema is more sensitive in shorter time spans

    
    # Volatility feature: measures standard deviation of daily log returns
    # This helps model understand periods of high and low price fluctuation
    # Which is a key factor in financial markets. A 20 day window is common
    df['volatility_20'] = np.log(df['Close']/df['Close'].shift(1)).rolling(window = 20).std() # what is the purpose of this line?
    # creates rolling metric of the last 20 days to reflect the overall volatility of stock price regardless of + or -


    # calendar features capture seasonal patterns such as dayofweek effects
    df['dayofweek'] = df.index.dayofweek # Monday = 0, Sunday = 6
    df['month'] = df.index.month
    df['year'] = df.index.year


    # dropping rows with missing values that were generated by creating lag and rolling window features.
    # This ensures data set is clean for model training
    df.dropna(inplace=True)
    # original data frame is diretly modified, just modifying df object, no new data 
    return df